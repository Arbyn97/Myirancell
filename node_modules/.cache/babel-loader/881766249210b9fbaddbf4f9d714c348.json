{"ast":null,"code":"/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule updateRowHeight\n */\n'use strict';\n/**\n * Update our cached row height for a specific index\n * based on the value from rowHeightGetter\n *\n * NOTE (jordan) This alters state so it shouldn't be called\n * without state having been cloned first.\n *\n * @param {!Object} state\n * @param {number} rowIdx\n * @return {number} The new row height\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = updateRowHeight;\n\nfunction updateRowHeight(state, rowIdx) {\n  var storedHeights = state.storedHeights,\n      rowOffsetIntervalTree = state.rowOffsetIntervalTree,\n      rowSettings = state.rowSettings;\n  var rowHeightGetter = rowSettings.rowHeightGetter,\n      subRowHeightGetter = rowSettings.subRowHeightGetter;\n  var newHeight = rowHeightGetter(rowIdx) + subRowHeightGetter(rowIdx);\n  var oldHeight = storedHeights[rowIdx];\n\n  if (newHeight !== oldHeight) {\n    rowOffsetIntervalTree.set(rowIdx, newHeight);\n    storedHeights[rowIdx] = newHeight;\n    state.scrollContentHeight += newHeight - oldHeight;\n  }\n\n  return storedHeights[rowIdx];\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","updateRowHeight","state","rowIdx","storedHeights","rowOffsetIntervalTree","rowSettings","rowHeightGetter","subRowHeightGetter","newHeight","oldHeight","set","scrollContentHeight"],"sources":["D:/myirancell/myirancell/node_modules/fixed-data-table-2/internal/reducers/updateRowHeight.js"],"sourcesContent":["/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule updateRowHeight\n */\n'use strict';\n/**\n * Update our cached row height for a specific index\n * based on the value from rowHeightGetter\n *\n * NOTE (jordan) This alters state so it shouldn't be called\n * without state having been cloned first.\n *\n * @param {!Object} state\n * @param {number} rowIdx\n * @return {number} The new row height\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = updateRowHeight;\n\nfunction updateRowHeight(state, rowIdx) {\n  var storedHeights = state.storedHeights,\n      rowOffsetIntervalTree = state.rowOffsetIntervalTree,\n      rowSettings = state.rowSettings;\n  var rowHeightGetter = rowSettings.rowHeightGetter,\n      subRowHeightGetter = rowSettings.subRowHeightGetter;\n  var newHeight = rowHeightGetter(rowIdx) + subRowHeightGetter(rowIdx);\n  var oldHeight = storedHeights[rowIdx];\n\n  if (newHeight !== oldHeight) {\n    rowOffsetIntervalTree.set(rowIdx, newHeight);\n    storedHeights[rowIdx] = newHeight;\n    state.scrollContentHeight += newHeight - oldHeight;\n  }\n\n  return storedHeights[rowIdx];\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,eAArB;;AAEA,SAASA,eAAT,CAAyBC,KAAzB,EAAgCC,MAAhC,EAAwC;EACtC,IAAIC,aAAa,GAAGF,KAAK,CAACE,aAA1B;EAAA,IACIC,qBAAqB,GAAGH,KAAK,CAACG,qBADlC;EAAA,IAEIC,WAAW,GAAGJ,KAAK,CAACI,WAFxB;EAGA,IAAIC,eAAe,GAAGD,WAAW,CAACC,eAAlC;EAAA,IACIC,kBAAkB,GAAGF,WAAW,CAACE,kBADrC;EAEA,IAAIC,SAAS,GAAGF,eAAe,CAACJ,MAAD,CAAf,GAA0BK,kBAAkB,CAACL,MAAD,CAA5D;EACA,IAAIO,SAAS,GAAGN,aAAa,CAACD,MAAD,CAA7B;;EAEA,IAAIM,SAAS,KAAKC,SAAlB,EAA6B;IAC3BL,qBAAqB,CAACM,GAAtB,CAA0BR,MAA1B,EAAkCM,SAAlC;IACAL,aAAa,CAACD,MAAD,CAAb,GAAwBM,SAAxB;IACAP,KAAK,CAACU,mBAAN,IAA6BH,SAAS,GAAGC,SAAzC;EACD;;EAED,OAAON,aAAa,CAACD,MAAD,CAApB;AACD"},"metadata":{},"sourceType":"script"}