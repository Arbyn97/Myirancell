{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.ScrollbarState = void 0;\n\nvar _clamp = _interopRequireDefault(require('./../vendor_upstream/core/clamp'));\n\nvar _shallowEqualSelector = _interopRequireDefault(require('./../helper/shallowEqualSelector'));\n\nvar _widthHelper = require('./../helper/widthHelper');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule roughHeights\n */\n\n\nvar BORDER_HEIGHT = 1;\nvar MIN_BUFFER_ROWS = 3;\nvar MAX_BUFFER_ROWS = 6;\nvar ScrollbarState = {\n  HIDDEN: 'hidden',\n  JOINT_SCROLLBARS: 'JOINT_SCROLLBARS',\n  VISIBLE: 'visible'\n};\n/**\n * Calculate the available height for the viewport.\n * Since we aren't 100% sure of whether scrollbars are visible\n * at this point, we compute a max & min viewport height.\n *\n * maxAvailableHeight is the largest it could be, while\n * minAvailableHeight is the smallest.\n * We also compute how large it is based on\n * the current scrollContentHeight in scrollbarsVisible.\n *\n * bufferRowCount is the number of rows to buffer both ahead and behind the viewport.\n * In total we will buffer twice this number of rows (half ahead, and half behind).\n *\n * reservedHeight is the height reserved for headers and footers.\n *\n * scrollStateX is the state of the horizontal scrollbar.\n * HIDDEN & VISIBLE are self explanatory, but\n * JOINT_SCROLLBARS mean the horizontal scroll will be shown if and\n * only if the vertical scrollbar is shown.\n *\n * @param {!Array.<{\n *   width: number,\n * }>} columnProps\n * @param {{\n *   cellGroupWrapperHeight: number,\n *   footerHeight: number,\n *   groupHeaderHeight: number,\n *   headerHeight: number,\n * }} elementHeights\n * @param {{\n *   bufferRowCount: ?number,\n *   rowHeight: number,\n *   subRowHeight: number,\n * }} rowSettings\n * @param {{\n *   overflowX: string,\n *   showScrollbarX: boolean,\n * }} scrollFlags\n * @param {{\n *   height: ?number,\n *   maxHeight: ?number,\n *   useMaxHeight: boolean,\n *   width: number,\n * }} tableSize\n * @return {{\n *   bufferRowsCount: number,\n *   minAvailableHeight: number,\n *   maxAvailableHeight: number,\n *   reservedHeight: number,\n *   scrollStateX: ScrollbarState,\n * }}\n */\n\nexports.ScrollbarState = ScrollbarState;\n\nfunction roughHeights(columnProps, elementHeights, rowSettings, scrollFlags, tableSize, scrollbarXHeight, scrollbarYWidth) {\n  var cellGroupWrapperHeight = elementHeights.cellGroupWrapperHeight,\n      footerHeight = elementHeights.footerHeight,\n      headerHeight = elementHeights.headerHeight,\n      groupHeaderHeight = elementHeights.groupHeaderHeight; // we don't need border height to be added to the table if we are using cellGroupWrapperHeight\n\n  var borderHeight = cellGroupWrapperHeight ? 0 : 2 * BORDER_HEIGHT;\n  var reservedHeight = footerHeight + headerHeight + groupHeaderHeight + borderHeight;\n  var height = tableSize.height,\n      maxHeight = tableSize.maxHeight,\n      useMaxHeight = tableSize.useMaxHeight,\n      width = tableSize.width;\n  var maxComponentHeight = Math.round(useMaxHeight ? maxHeight : height);\n  var roughAvailableHeight = maxComponentHeight - reservedHeight;\n  var scrollStateX = getScrollStateX(columnProps, scrollFlags, width, scrollbarYWidth);\n  /*\n   * Early estimates of how much height we have to show rows.\n   * We won't know which one is real until we know about horizontal scrollbar which\n   * requires knowing about vertical scrollbar as well and that\n   * requires scrollContentHeight which\n   * requires us to have handled scrollTo / scrollToRow...\n   */\n\n  var minAvailableHeight = roughAvailableHeight;\n  var maxAvailableHeight = roughAvailableHeight;\n\n  switch (scrollStateX) {\n    case ScrollbarState.VISIBLE:\n      {\n        minAvailableHeight -= scrollbarXHeight;\n        maxAvailableHeight -= scrollbarXHeight;\n        break;\n      }\n\n    case ScrollbarState.JOINT_SCROLLBARS:\n      {\n        minAvailableHeight -= scrollbarXHeight;\n        break;\n      }\n  }\n\n  return {\n    bufferRowCount: getBufferRowCount(maxAvailableHeight, rowSettings),\n    minAvailableHeight: Math.max(minAvailableHeight, 0),\n    maxAvailableHeight: Math.max(maxAvailableHeight, 0),\n    reservedHeight: reservedHeight,\n    scrollStateX: scrollStateX\n  };\n}\n/**\n * @param {!Array.<{\n *   width: number,\n * }>} columnProps\n * @param {{\n *   overflowX: string,\n *   showScrollbarX: boolean,\n * }} scrollFlags\n * @param {number} width\n * @return {ScrollbarState}\n */\n\n\nfunction getScrollStateX(columnProps, scrollFlags, width, scrollbarYWidth) {\n  var overflowX = scrollFlags.overflowX,\n      showScrollbarX = scrollFlags.showScrollbarX;\n  var minColWidth = (0, _widthHelper.getTotalWidth)(columnProps);\n\n  if (overflowX === 'hidden' || showScrollbarX === false) {\n    return ScrollbarState.HIDDEN;\n  } else if (minColWidth > width) {\n    return ScrollbarState.VISIBLE;\n  }\n\n  if (minColWidth > width - scrollbarYWidth) {\n    return ScrollbarState.JOINT_SCROLLBARS;\n  }\n\n  return ScrollbarState.HIDDEN;\n}\n/**\n * @param {number} maxAvailableHeight\n * @param {{\n *   bufferRowCount: ?number,\n *   rowHeight: number,\n *   subRowHeight: number,\n * }} rowSettings\n * @return {number}\n */\n\n\nfunction getBufferRowCount(maxAvailableHeight, rowSettings) {\n  var bufferRowCount = rowSettings.bufferRowCount,\n      rowHeight = rowSettings.rowHeight,\n      subRowHeight = rowSettings.subRowHeight;\n\n  if (bufferRowCount !== undefined) {\n    console.log('buffer set: ' + bufferRowCount);\n    return bufferRowCount;\n  }\n\n  var fullRowHeight = rowHeight + subRowHeight;\n  var avgVisibleRowCount = Math.ceil(maxAvailableHeight / fullRowHeight) + 1;\n  return (0, _clamp[\"default\"])(Math.floor(avgVisibleRowCount / 2), MIN_BUFFER_ROWS, MAX_BUFFER_ROWS);\n}\n\nvar _default = (0, _shallowEqualSelector[\"default\"])([function (state) {\n  return state.columnProps;\n}, function (state) {\n  return state.elementHeights;\n}, function (state) {\n  return state.rowSettings;\n}, function (state) {\n  return state.scrollFlags;\n}, function (state) {\n  return state.tableSize;\n}, function (state) {\n  return state.scrollbarXHeight;\n}, function (state) {\n  return state.scrollbarYWidth;\n}], roughHeights);\n\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","ScrollbarState","_clamp","_interopRequireDefault","require","_shallowEqualSelector","_widthHelper","obj","__esModule","BORDER_HEIGHT","MIN_BUFFER_ROWS","MAX_BUFFER_ROWS","HIDDEN","JOINT_SCROLLBARS","VISIBLE","roughHeights","columnProps","elementHeights","rowSettings","scrollFlags","tableSize","scrollbarXHeight","scrollbarYWidth","cellGroupWrapperHeight","footerHeight","headerHeight","groupHeaderHeight","borderHeight","reservedHeight","height","maxHeight","useMaxHeight","width","maxComponentHeight","Math","round","roughAvailableHeight","scrollStateX","getScrollStateX","minAvailableHeight","maxAvailableHeight","bufferRowCount","getBufferRowCount","max","overflowX","showScrollbarX","minColWidth","getTotalWidth","rowHeight","subRowHeight","undefined","console","log","fullRowHeight","avgVisibleRowCount","ceil","floor","_default","state"],"sources":["D:/myirancell/myirancell/node_modules/fixed-data-table-2/internal/selectors/roughHeights.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.ScrollbarState = void 0;\n\nvar _clamp = _interopRequireDefault(require('./../vendor_upstream/core/clamp'));\n\nvar _shallowEqualSelector = _interopRequireDefault(require('./../helper/shallowEqualSelector'));\n\nvar _widthHelper = require('./../helper/widthHelper');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Copyright Schrodinger, LLC\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule roughHeights\n */\nvar BORDER_HEIGHT = 1;\nvar MIN_BUFFER_ROWS = 3;\nvar MAX_BUFFER_ROWS = 6;\nvar ScrollbarState = {\n  HIDDEN: 'hidden',\n  JOINT_SCROLLBARS: 'JOINT_SCROLLBARS',\n  VISIBLE: 'visible'\n};\n/**\n * Calculate the available height for the viewport.\n * Since we aren't 100% sure of whether scrollbars are visible\n * at this point, we compute a max & min viewport height.\n *\n * maxAvailableHeight is the largest it could be, while\n * minAvailableHeight is the smallest.\n * We also compute how large it is based on\n * the current scrollContentHeight in scrollbarsVisible.\n *\n * bufferRowCount is the number of rows to buffer both ahead and behind the viewport.\n * In total we will buffer twice this number of rows (half ahead, and half behind).\n *\n * reservedHeight is the height reserved for headers and footers.\n *\n * scrollStateX is the state of the horizontal scrollbar.\n * HIDDEN & VISIBLE are self explanatory, but\n * JOINT_SCROLLBARS mean the horizontal scroll will be shown if and\n * only if the vertical scrollbar is shown.\n *\n * @param {!Array.<{\n *   width: number,\n * }>} columnProps\n * @param {{\n *   cellGroupWrapperHeight: number,\n *   footerHeight: number,\n *   groupHeaderHeight: number,\n *   headerHeight: number,\n * }} elementHeights\n * @param {{\n *   bufferRowCount: ?number,\n *   rowHeight: number,\n *   subRowHeight: number,\n * }} rowSettings\n * @param {{\n *   overflowX: string,\n *   showScrollbarX: boolean,\n * }} scrollFlags\n * @param {{\n *   height: ?number,\n *   maxHeight: ?number,\n *   useMaxHeight: boolean,\n *   width: number,\n * }} tableSize\n * @return {{\n *   bufferRowsCount: number,\n *   minAvailableHeight: number,\n *   maxAvailableHeight: number,\n *   reservedHeight: number,\n *   scrollStateX: ScrollbarState,\n * }}\n */\n\nexports.ScrollbarState = ScrollbarState;\n\nfunction roughHeights(columnProps, elementHeights, rowSettings, scrollFlags, tableSize, scrollbarXHeight, scrollbarYWidth) {\n  var cellGroupWrapperHeight = elementHeights.cellGroupWrapperHeight,\n      footerHeight = elementHeights.footerHeight,\n      headerHeight = elementHeights.headerHeight,\n      groupHeaderHeight = elementHeights.groupHeaderHeight; // we don't need border height to be added to the table if we are using cellGroupWrapperHeight\n\n  var borderHeight = cellGroupWrapperHeight ? 0 : 2 * BORDER_HEIGHT;\n  var reservedHeight = footerHeight + headerHeight + groupHeaderHeight + borderHeight;\n  var height = tableSize.height,\n      maxHeight = tableSize.maxHeight,\n      useMaxHeight = tableSize.useMaxHeight,\n      width = tableSize.width;\n  var maxComponentHeight = Math.round(useMaxHeight ? maxHeight : height);\n  var roughAvailableHeight = maxComponentHeight - reservedHeight;\n  var scrollStateX = getScrollStateX(columnProps, scrollFlags, width, scrollbarYWidth);\n  /*\n   * Early estimates of how much height we have to show rows.\n   * We won't know which one is real until we know about horizontal scrollbar which\n   * requires knowing about vertical scrollbar as well and that\n   * requires scrollContentHeight which\n   * requires us to have handled scrollTo / scrollToRow...\n   */\n\n  var minAvailableHeight = roughAvailableHeight;\n  var maxAvailableHeight = roughAvailableHeight;\n\n  switch (scrollStateX) {\n    case ScrollbarState.VISIBLE:\n      {\n        minAvailableHeight -= scrollbarXHeight;\n        maxAvailableHeight -= scrollbarXHeight;\n        break;\n      }\n\n    case ScrollbarState.JOINT_SCROLLBARS:\n      {\n        minAvailableHeight -= scrollbarXHeight;\n        break;\n      }\n  }\n\n  return {\n    bufferRowCount: getBufferRowCount(maxAvailableHeight, rowSettings),\n    minAvailableHeight: Math.max(minAvailableHeight, 0),\n    maxAvailableHeight: Math.max(maxAvailableHeight, 0),\n    reservedHeight: reservedHeight,\n    scrollStateX: scrollStateX\n  };\n}\n/**\n * @param {!Array.<{\n *   width: number,\n * }>} columnProps\n * @param {{\n *   overflowX: string,\n *   showScrollbarX: boolean,\n * }} scrollFlags\n * @param {number} width\n * @return {ScrollbarState}\n */\n\n\nfunction getScrollStateX(columnProps, scrollFlags, width, scrollbarYWidth) {\n  var overflowX = scrollFlags.overflowX,\n      showScrollbarX = scrollFlags.showScrollbarX;\n  var minColWidth = (0, _widthHelper.getTotalWidth)(columnProps);\n\n  if (overflowX === 'hidden' || showScrollbarX === false) {\n    return ScrollbarState.HIDDEN;\n  } else if (minColWidth > width) {\n    return ScrollbarState.VISIBLE;\n  }\n\n  if (minColWidth > width - scrollbarYWidth) {\n    return ScrollbarState.JOINT_SCROLLBARS;\n  }\n\n  return ScrollbarState.HIDDEN;\n}\n/**\n * @param {number} maxAvailableHeight\n * @param {{\n *   bufferRowCount: ?number,\n *   rowHeight: number,\n *   subRowHeight: number,\n * }} rowSettings\n * @return {number}\n */\n\n\nfunction getBufferRowCount(maxAvailableHeight, rowSettings) {\n  var bufferRowCount = rowSettings.bufferRowCount,\n      rowHeight = rowSettings.rowHeight,\n      subRowHeight = rowSettings.subRowHeight;\n\n  if (bufferRowCount !== undefined) {\n    console.log('buffer set: ' + bufferRowCount);\n    return bufferRowCount;\n  }\n\n  var fullRowHeight = rowHeight + subRowHeight;\n  var avgVisibleRowCount = Math.ceil(maxAvailableHeight / fullRowHeight) + 1;\n  return (0, _clamp[\"default\"])(Math.floor(avgVisibleRowCount / 2), MIN_BUFFER_ROWS, MAX_BUFFER_ROWS);\n}\n\nvar _default = (0, _shallowEqualSelector[\"default\"])([function (state) {\n  return state.columnProps;\n}, function (state) {\n  return state.elementHeights;\n}, function (state) {\n  return state.rowSettings;\n}, function (state) {\n  return state.scrollFlags;\n}, function (state) {\n  return state.tableSize;\n}, function (state) {\n  return state.scrollbarXHeight;\n}, function (state) {\n  return state.scrollbarYWidth;\n}], roughHeights);\n\nexports[\"default\"] = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}