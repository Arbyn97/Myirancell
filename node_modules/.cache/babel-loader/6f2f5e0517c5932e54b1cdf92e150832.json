{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _forEach = _interopRequireDefault(require('lodash/forEach'));\n\nvar _map = _interopRequireDefault(require('lodash/map'));\n\nvar _shallowEqualSelector = _interopRequireDefault(require('./../helper/shallowEqualSelector'));\n\nvar _widthHelper = require('./../helper/widthHelper');\n\nvar _scrollbarsVisible = _interopRequireDefault(require('././scrollbarsVisible'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\n * @typedef {{\n *   fixed: boolean,\n *   fixedRight: boolean,\n *   flexGrow: number,\n *   width: number,\n *   groupIdx?: number\n * }} columnDefinition\n */\n\n/**\n * @param {!Array.<columnDefinition>} columnGroupProps\n * @param {!Array.<columnDefinition>} columnProps\n * @param {boolean} scrollEnabledY\n * @param {number} width\n * @return {{\n *   columnGroupProps: !Array.<columnDefinition>,\n *   columnProps: !Array.<columnDefinition>,\n *   availableScrollWidth: number,\n *   fixedColumns: !Array.<columnDefinition>,\n *   fixedRightColumns: !Array.<columnDefinition>,\n *   scrollableColumns: !Array.<columnDefinition>,\n *   maxScrollX: number,\n * }} The total width of all columns.\n */\n\n\nfunction columnWidths(columnGroupProps, columnProps, scrollEnabledY, width, scrollbarYWidth) {\n  var scrollbarSpace = scrollEnabledY ? scrollbarYWidth : 0;\n  var viewportWidth = width - scrollbarSpace;\n\n  var _flexWidths = flexWidths(columnGroupProps, columnProps, viewportWidth),\n      newColumnGroupProps = _flexWidths.newColumnGroupProps,\n      newColumnProps = _flexWidths.newColumnProps;\n\n  var _groupColumns = groupColumns(newColumnProps),\n      fixedColumns = _groupColumns.fixedColumns,\n      fixedRightColumns = _groupColumns.fixedRightColumns,\n      scrollableColumns = _groupColumns.scrollableColumns;\n\n  var availableScrollWidth = viewportWidth - (0, _widthHelper.getTotalWidth)(fixedColumns) - (0, _widthHelper.getTotalWidth)(fixedRightColumns);\n  var maxScrollX = Math.max(0, (0, _widthHelper.getTotalWidth)(newColumnProps) - viewportWidth);\n  return {\n    columnGroupProps: newColumnGroupProps,\n    columnProps: newColumnProps,\n    availableScrollWidth: availableScrollWidth,\n    fixedColumns: fixedColumns,\n    fixedRightColumns: fixedRightColumns,\n    scrollableColumns: scrollableColumns,\n    maxScrollX: maxScrollX\n  };\n}\n/**\n * @param {!Array.<columnDefinition>} columnGroupProps\n * @param {!Array.<columnDefinition>} columnProps\n * @param {number} viewportWidth\n * @return {{\n *   newColumnGroupProps: !Array.<columnDefinition>,\n *   newColumnProps: !Array.<columnDefinition>\n * }}\n */\n\n\nfunction flexWidths(columnGroupProps, columnProps, viewportWidth) {\n  var newColumnProps = columnProps;\n  var remainingFlexGrow = (0, _widthHelper.getTotalFlexGrow)(columnProps); // if any column is a flex column, we'll need to calculate the widths for every column\n\n  if (remainingFlexGrow !== 0) {\n    var columnsWidth = (0, _widthHelper.getTotalWidth)(columnProps);\n    var remainingFlexWidth = Math.max(viewportWidth - columnsWidth, 0); // calculate and set width for each column\n\n    newColumnProps = (0, _map[\"default\"])(columnProps, function (column) {\n      var flexGrow = column.flexGrow; // if no flexGrow is specified, column defaults to original width\n\n      if (!flexGrow) {\n        return column;\n      }\n\n      var flexWidth = Math.floor(flexGrow * remainingFlexWidth / remainingFlexGrow);\n      var newWidth = column.width + flexWidth;\n      remainingFlexGrow -= flexGrow;\n      remainingFlexWidth -= flexWidth;\n      return _extends({}, column, {\n        width: newWidth\n      });\n    });\n  } // calculate width for each column group\n\n\n  var columnGroupWidths = (0, _map[\"default\"])(columnGroupProps, function () {\n    return 0;\n  });\n  (0, _forEach[\"default\"])(newColumnProps, function (column) {\n    if (column.groupIdx !== undefined) {\n      columnGroupWidths[column.groupIdx] += column.width;\n    }\n  }); // set the width for each column group\n\n  var newColumnGroupProps = (0, _map[\"default\"])(columnGroupProps, function (columnGroup, idx) {\n    if (columnGroupWidths[idx] === columnGroup.width) {\n      return columnGroup;\n    }\n\n    return _extends({}, columnGroup, {\n      width: columnGroupWidths[idx]\n    });\n  });\n  return {\n    newColumnGroupProps: newColumnGroupProps,\n    newColumnProps: newColumnProps\n  };\n}\n/**\n * @param {!Array.<columnDefinition>} columnProps\n * @return {{\n *   fixedColumns: !Array.<columnDefinition>,\n *   fixedRightColumns: !Array.<columnDefinition>,\n *   scrollableColumns: !Array.<columnDefinition>\n * }}\n */\n\n\nfunction groupColumns(columnProps) {\n  var fixedColumns = [];\n  var fixedRightColumns = [];\n  var scrollableColumns = [];\n  (0, _forEach[\"default\"])(columnProps, function (columnProp) {\n    var container = scrollableColumns;\n\n    if (columnProp.fixed) {\n      container = fixedColumns;\n    } else if (columnProp.fixedRight) {\n      container = fixedRightColumns;\n    }\n\n    container.push(columnProp);\n  });\n  return {\n    fixedColumns: fixedColumns,\n    fixedRightColumns: fixedRightColumns,\n    scrollableColumns: scrollableColumns\n  };\n}\n\nvar _default = (0, _shallowEqualSelector[\"default\"])([function (state) {\n  return state.columnGroupProps;\n}, function (state) {\n  return state.columnProps;\n}, function (state) {\n  return (0, _scrollbarsVisible[\"default\"])(state).scrollEnabledY;\n}, function (state) {\n  return state.tableSize.width;\n}, function (state) {\n  return state.scrollbarYWidth;\n}], columnWidths);\n\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","_forEach","_interopRequireDefault","require","_map","_shallowEqualSelector","_widthHelper","_scrollbarsVisible","obj","__esModule","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","columnWidths","columnGroupProps","columnProps","scrollEnabledY","width","scrollbarYWidth","scrollbarSpace","viewportWidth","_flexWidths","flexWidths","newColumnGroupProps","newColumnProps","_groupColumns","groupColumns","fixedColumns","fixedRightColumns","scrollableColumns","availableScrollWidth","getTotalWidth","maxScrollX","Math","max","remainingFlexGrow","getTotalFlexGrow","columnsWidth","remainingFlexWidth","column","flexGrow","flexWidth","floor","newWidth","columnGroupWidths","groupIdx","undefined","columnGroup","idx","columnProp","container","fixed","fixedRight","push","_default","state","tableSize"],"sources":["D:/myirancell/myirancell/node_modules/fixed-data-table-2/internal/selectors/columnWidths.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _forEach = _interopRequireDefault(require('lodash/forEach'));\n\nvar _map = _interopRequireDefault(require('lodash/map'));\n\nvar _shallowEqualSelector = _interopRequireDefault(require('./../helper/shallowEqualSelector'));\n\nvar _widthHelper = require('./../helper/widthHelper');\n\nvar _scrollbarsVisible = _interopRequireDefault(require('././scrollbarsVisible'));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * @typedef {{\n *   fixed: boolean,\n *   fixedRight: boolean,\n *   flexGrow: number,\n *   width: number,\n *   groupIdx?: number\n * }} columnDefinition\n */\n\n/**\n * @param {!Array.<columnDefinition>} columnGroupProps\n * @param {!Array.<columnDefinition>} columnProps\n * @param {boolean} scrollEnabledY\n * @param {number} width\n * @return {{\n *   columnGroupProps: !Array.<columnDefinition>,\n *   columnProps: !Array.<columnDefinition>,\n *   availableScrollWidth: number,\n *   fixedColumns: !Array.<columnDefinition>,\n *   fixedRightColumns: !Array.<columnDefinition>,\n *   scrollableColumns: !Array.<columnDefinition>,\n *   maxScrollX: number,\n * }} The total width of all columns.\n */\nfunction columnWidths(columnGroupProps, columnProps, scrollEnabledY, width, scrollbarYWidth) {\n  var scrollbarSpace = scrollEnabledY ? scrollbarYWidth : 0;\n  var viewportWidth = width - scrollbarSpace;\n\n  var _flexWidths = flexWidths(columnGroupProps, columnProps, viewportWidth),\n      newColumnGroupProps = _flexWidths.newColumnGroupProps,\n      newColumnProps = _flexWidths.newColumnProps;\n\n  var _groupColumns = groupColumns(newColumnProps),\n      fixedColumns = _groupColumns.fixedColumns,\n      fixedRightColumns = _groupColumns.fixedRightColumns,\n      scrollableColumns = _groupColumns.scrollableColumns;\n\n  var availableScrollWidth = viewportWidth - (0, _widthHelper.getTotalWidth)(fixedColumns) - (0, _widthHelper.getTotalWidth)(fixedRightColumns);\n  var maxScrollX = Math.max(0, (0, _widthHelper.getTotalWidth)(newColumnProps) - viewportWidth);\n  return {\n    columnGroupProps: newColumnGroupProps,\n    columnProps: newColumnProps,\n    availableScrollWidth: availableScrollWidth,\n    fixedColumns: fixedColumns,\n    fixedRightColumns: fixedRightColumns,\n    scrollableColumns: scrollableColumns,\n    maxScrollX: maxScrollX\n  };\n}\n/**\n * @param {!Array.<columnDefinition>} columnGroupProps\n * @param {!Array.<columnDefinition>} columnProps\n * @param {number} viewportWidth\n * @return {{\n *   newColumnGroupProps: !Array.<columnDefinition>,\n *   newColumnProps: !Array.<columnDefinition>\n * }}\n */\n\n\nfunction flexWidths(columnGroupProps, columnProps, viewportWidth) {\n  var newColumnProps = columnProps;\n  var remainingFlexGrow = (0, _widthHelper.getTotalFlexGrow)(columnProps); // if any column is a flex column, we'll need to calculate the widths for every column\n\n  if (remainingFlexGrow !== 0) {\n    var columnsWidth = (0, _widthHelper.getTotalWidth)(columnProps);\n    var remainingFlexWidth = Math.max(viewportWidth - columnsWidth, 0); // calculate and set width for each column\n\n    newColumnProps = (0, _map[\"default\"])(columnProps, function (column) {\n      var flexGrow = column.flexGrow; // if no flexGrow is specified, column defaults to original width\n\n      if (!flexGrow) {\n        return column;\n      }\n\n      var flexWidth = Math.floor(flexGrow * remainingFlexWidth / remainingFlexGrow);\n      var newWidth = column.width + flexWidth;\n      remainingFlexGrow -= flexGrow;\n      remainingFlexWidth -= flexWidth;\n      return _extends({}, column, {\n        width: newWidth\n      });\n    });\n  } // calculate width for each column group\n\n\n  var columnGroupWidths = (0, _map[\"default\"])(columnGroupProps, function () {\n    return 0;\n  });\n  (0, _forEach[\"default\"])(newColumnProps, function (column) {\n    if (column.groupIdx !== undefined) {\n      columnGroupWidths[column.groupIdx] += column.width;\n    }\n  }); // set the width for each column group\n\n  var newColumnGroupProps = (0, _map[\"default\"])(columnGroupProps, function (columnGroup, idx) {\n    if (columnGroupWidths[idx] === columnGroup.width) {\n      return columnGroup;\n    }\n\n    return _extends({}, columnGroup, {\n      width: columnGroupWidths[idx]\n    });\n  });\n  return {\n    newColumnGroupProps: newColumnGroupProps,\n    newColumnProps: newColumnProps\n  };\n}\n/**\n * @param {!Array.<columnDefinition>} columnProps\n * @return {{\n *   fixedColumns: !Array.<columnDefinition>,\n *   fixedRightColumns: !Array.<columnDefinition>,\n *   scrollableColumns: !Array.<columnDefinition>\n * }}\n */\n\n\nfunction groupColumns(columnProps) {\n  var fixedColumns = [];\n  var fixedRightColumns = [];\n  var scrollableColumns = [];\n  (0, _forEach[\"default\"])(columnProps, function (columnProp) {\n    var container = scrollableColumns;\n\n    if (columnProp.fixed) {\n      container = fixedColumns;\n    } else if (columnProp.fixedRight) {\n      container = fixedRightColumns;\n    }\n\n    container.push(columnProp);\n  });\n  return {\n    fixedColumns: fixedColumns,\n    fixedRightColumns: fixedRightColumns,\n    scrollableColumns: scrollableColumns\n  };\n}\n\nvar _default = (0, _shallowEqualSelector[\"default\"])([function (state) {\n  return state.columnGroupProps;\n}, function (state) {\n  return state.columnProps;\n}, function (state) {\n  return (0, _scrollbarsVisible[\"default\"])(state).scrollEnabledY;\n}, function (state) {\n  return state.tableSize.width;\n}, function (state) {\n  return state.scrollbarYWidth;\n}], columnWidths);\n\nexports[\"default\"] = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}